### Interactive Stacked Bar Charts ###

# We calculate the unique values in the 'department_title' column of the dataset, setting them in descending order.
dep_counts = df['department_title'].value_counts().sort_values(ascending=False)

# We group the original dataset by the department_title column.
dep_grouped = df.groupby('department_title')

# We calculate how many artworks are (are not) on view and are in public or private domain for each department.
is_on_view_count = dep_grouped['is_on_view'].sum()[dep_counts.index]
is_not_on_view_count = (dep_counts - is_on_view_count)[dep_counts.index]
public_count = dep_grouped['is_public_domain'].sum()[dep_counts.index]
private_count = (dep_counts - public_count)[dep_counts.index]

import plotly.graph_objects as go
from plotly.subplots import make_subplots

# We create the first figure.
fig1 = go.Figure()

# We add traces for the first stacked bar chart.
fig1.add_trace(go.Bar(x=dep_counts.index, y=is_not_on_view_count, name='Is Not On View', marker_color='darkgreen'))
fig1.add_trace(go.Bar(x=dep_counts.index, y=is_on_view_count, name='Is On View', marker_color='lime'))

# We customize the layout of the first chart and add interactivity.
fig1.update_layout(
    title='Artworks on View by Department',
    width=1000,
    height=800,
    xaxis_tickangle=-45,
    yaxis_title='Count',
    hovermode='closest',
    barmode='stack',
    updatemenus=[dict(
        type='buttons',
        showactive=False,
        buttons=[dict(
            label='Zoom',
            method='relayout',
            args=[{'xaxis.range': [0, 2]}]
        ), dict(
            label='Reset',
            method='relayout',
            args=[{'xaxis.range': [None, None]}]
        )]
    )],
    legend=dict(
        font=dict(size=16),
    )
)

# We create the second figure.
fig2 = go.Figure()

# We add traces for the second stacked bar chart.
fig2.add_trace(go.Bar(x=dep_counts.index, y=private_count, name='Private Domain', marker_color='darkred'))
fig2.add_trace(go.Bar(x=dep_counts.index, y=public_count, name='Public Domain', marker_color='red'))

# We customize the layout of the second chart and add interactivity.
fig2.update_layout(
    title='Artworks in Public/Private Domain by Department',
    width=1000,
    height=800,
    xaxis_tickangle=-45,
    yaxis_title='Count',
    hovermode='closest',
    barmode='stack',
    updatemenus=[dict(
        type='buttons',
        showactive=False,
        buttons=[dict(
            label='Zoom',
            method='relayout',
            args=[{'xaxis.range': [0, 2]}]
        ), dict(
            label='Reset',
            method='relayout',
            args=[{'xaxis.range': [None, None]}]
        )]
    )],
    legend=dict(
        font=dict(size=16),
    )
)

# Show the charts
fig1.show()
fig2.show()

# In this case, we have two different interactive plots.

#########################################################################################

# Interactive Stacked Bar Chart

# We calculate the unique values in the 'department_title' column of the dataset, setting them in descending order.
dep_counts = df['department_title'].value_counts().sort_values(ascending=False)

# We group the original dataset by the department_title column.
dep_grouped = df.groupby('department_title')

# We calculate how many artworks are (are not) on view and are in public or private domain for each department.
is_on_view_count = dep_grouped['is_on_view'].sum()[dep_counts.index]
is_not_on_view_count = (dep_counts - is_on_view_count)[dep_counts.index]
public_count = dep_grouped['is_public_domain'].sum()[dep_counts.index]
private_count = (dep_counts - public_count)[dep_counts.index]
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Create the first figure
fig1 = go.Figure()

# Add traces for the first stacked bar chart
fig1.add_trace(go.Bar(x=total_count.index, y=is_not_on_view_count, name='Is Not On View', marker_color='darkgreen'))
fig1.add_trace(go.Bar(x=total_count.index, y=is_on_view_count, name='Is On View', marker_color='lime'))

# Customize the layout of the first chart and add interactivity
fig1.update_layout(
    title='Artworks on View by Department',
    width=1000,
    height=1000,
    xaxis_tickangle=-45,
    yaxis_title='Count',
    hovermode='closest',
    barmode='stack',
    updatemenus=[dict(
        type='buttons',
        showactive=False,
        buttons=[dict(
            label='Zoom',
            method='relayout',
            args=[{'xaxis.range': [0, 2]}]
        ), dict(
            label='Reset',
            method='relayout',
            args=[{'xaxis.range': [None, None]}]
        )]
    )]
)

# Create the second figure
fig2 = go.Figure()

# Add traces for the second stacked bar chart
fig2.add_trace(go.Bar(x=total_count.index, y=private_count, name='Private Domain', marker_color='darkred'))
fig2.add_trace(go.Bar(x=total_count.index, y=public_count, name='Public Domain', marker_color='red'))

# Customize the layout of the second chart and add interactivity
fig2.update_layout(
    title='Artworks in Public/Private Domain by Department',
    width=1000,
    height=1000,
    xaxis_tickangle=-45,
    yaxis_title='Count',
    hovermode='closest',
    barmode='stack',
    updatemenus=[dict(
        type='buttons',
        showactive=False,
        buttons=[dict(
            label='Zoom',
            method='relayout',
            args=[{'xaxis.range': [0, 2]}]
        ), dict(
            label='Reset',
            method='relayout',
            args=[{'xaxis.range': [None, None]}]
        )]
    )]
)

# Merge the two figures
merged_fig = make_subplots(rows=2, cols=1, shared_xaxes=True)

# Add the traces from the first chart to the first subplot of the merged figure
for trace in fig1.data:
    merged_fig.add_trace(trace, row=1, col=1)

# Add the traces from the second chart to the second subplot of the merged figure
for trace in fig2.data:
    merged_fig.add_trace(trace, row=2, col=1)

# Customize the layout of the merged figure and add interactivity
merged_fig.update_layout(
    title='Artworks by Department',
    width=1000,
    height=1000,
    xaxis_tickangle=-45,
    yaxis_title='Count',
    hovermode='closest',
    barmode='stack',
    updatemenus=[dict(
        type='buttons',
        showactive=False,
        buttons=[dict(
            label='Zoom',
            method='relayout',
            args=[{'xaxis.range': [0, 2]}]
        ), dict(
            label='Reset',
            method='relayout',
            args=[{'xaxis.range': [None, None]}]
        )]
    )],
    legend=dict(
        font=dict(size=16),
        traceorder='normal'
    )   
)

# Show the merged figure
merged_fig.show()

# In this case we have just a plot, with two rows.
